#!/usr/bin/env python3
"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–µ—à–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
–°–æ–∑–¥–∞–µ—Ç cache_data.json —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
"""
import json
import os
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)

def export_cache_data():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ scan_results_cache.json –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–µ—à–∞
    cache_file = 'scan_results_cache.json'
    if not os.path.exists(cache_file):
        logging.error(f"–§–∞–π–ª {cache_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
    with open(cache_file, 'r') as f:
        cache_data = json.load(f)
    
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cache_data)} –º–∞—Ä–∫–µ—Ç–æ–≤ –∏–∑ –∫–µ—à–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    enhanced_data = {}
    
    for key, data in cache_data.items():
        # –ü–∞—Ä—Å–∏–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ –∏ –º–∞—Ä–∫–µ—Ç–µ
        parts = key.split('_')
        network = parts[0]
        market = parts[-1] if len(parts) > 2 else 'unknown'
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        enhanced_data[key] = data.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        enhanced_data[key]['network'] = network
        enhanced_data[key]['market'] = market
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º scanned_ranges –≤ range —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if 'scanned_ranges' in data and 'range' not in data:
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–∫–∏ –∏–∑ scanned_ranges
            all_blocks = []
            for range_pair in data['scanned_ranges']:
                all_blocks.extend(range_pair)
            if all_blocks:
                enhanced_data[key]['range'] = {
                    'from_block': min(all_blocks),
                    'to_block': max(all_blocks)
                }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'results' in data:
            for result in data['results']:
                # –ï—Å–ª–∏ –µ—Å—Ç—å block_number –Ω–æ –Ω–µ—Ç timestamp, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É
                if 'block_number' in result and 'timestamp' not in result:
                    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–æ–∫–∞
                    block_number = result['block_number']
                    estimated_date = estimate_date_from_block(network, block_number)
                    result['estimated_date'] = estimated_date.isoformat()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if 'hard_liq_count' not in result:
                    total = result.get('total_positions', 0)
                    soft = result.get('soft_liq_count', 0)
                    ignored = result.get('ignored_positions', 0)
                    result['hard_liq_count'] = max(0, total - soft - ignored)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    output_file = 'cache_data.json'
    with open(output_file, 'w') as f:
        json.dump(enhanced_data, f, indent=2)
    
    logging.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_summary(enhanced_data)
    
    return True

def estimate_date_from_block(network, block_number):
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–æ–∫–∞"""
    
    # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ —Ç–æ—á–∫–∏ (–±–ª–æ–∫ -> –¥–∞—Ç–∞)
    references = {
        'ethereum': {
            21515000: datetime(2025, 1, 1),
            21527368: datetime(2025, 1, 2),
            23134000: datetime(2025, 8, 13)
        },
        'arbitrum': {
            290658752: datetime(2025, 1, 1),
            290864657: datetime(2025, 1, 2),
            368368256: datetime(2025, 8, 14)
        },
        'fraxtal': {
            19840000: datetime(2025, 1, 1),
            19860000: datetime(2025, 1, 2),
            23000000: datetime(2025, 8, 14)
        }
    }
    
    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    block_times = {
        'ethereum': 12,
        'arbitrum': 0.25,
        'fraxtal': 2
    }
    
    if network not in references:
        return datetime.now()
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—É—é —Ç–æ—á–∫—É
    ref_blocks = sorted(references[network].keys())
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–≤–µ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    ref_block = ref_blocks[0]
    ref_date = references[network][ref_block]
    
    for block in ref_blocks:
        if block <= block_number:
            ref_block = block
            ref_date = references[network][block]
        else:
            break
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É
    block_diff = block_number - ref_block
    seconds_diff = block_diff * block_times.get(network, 12)
    estimated_date = datetime.fromtimestamp(ref_date.timestamp() + seconds_diff)
    
    return estimated_date

def print_summary(data):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    total_soft = 0
    total_hard = 0
    total_volume = 0
    networks = set()
    markets = set()
    date_ranges = {}
    
    for key, market_data in data.items():
        network = market_data.get('network', 'unknown')
        market = market_data.get('market', 'unknown')
        
        networks.add(network)
        markets.add(market)
        
        if 'results' in market_data:
            for result in market_data['results']:
                total_soft += result.get('soft_liq_count', 0)
                total_hard += result.get('hard_liq_count', 0)
                total_volume += result.get('total_collateral_usd', 0)
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                if 'estimated_date' in result:
                    date = result['estimated_date'][:10]
                    if network not in date_ranges:
                        date_ranges[network] = {'min': date, 'max': date}
                    else:
                        date_ranges[network]['min'] = min(date_ranges[network]['min'], date)
                        date_ranges[network]['max'] = max(date_ranges[network]['max'], date)
    
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê")
    print("="*60)
    print(f"üåê –°–µ—Ç–µ–π: {len(networks)} - {', '.join(sorted(networks))}")
    print(f"üìà –ú–∞—Ä–∫–µ—Ç–æ–≤: {len(markets)}")
    print(f"üíß –°–æ—Ñ—Ç-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {total_soft:,}")
    print(f"üî• –•–∞—Ä–¥-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {total_hard:,}")
    print(f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${total_volume:,.2f}")
    
    if date_ranges:
        print("\nüìÖ –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –ø–æ —Å–µ—Ç—è–º:")
        for network, dates in sorted(date_ranges.items()):
            print(f"  {network}: {dates['min']} - {dates['max']}")
    
    print("="*60)
    print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!")
    print("üìå –û—Ç–∫—Ä–æ–π—Ç–µ visualizer.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

if __name__ == "__main__":
    success = export_cache_data()
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:")
        print("   1. python3 -m http.server 8000")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/visualizer.html")